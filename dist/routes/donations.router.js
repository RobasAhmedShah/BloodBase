"use strict";
/*
 * SPDX-License-Identifier: Apache-2.0
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.donationsRouter = void 0;
const express_1 = __importDefault(require("express"));
const express_validator_1 = require("express-validator");
const http_status_codes_1 = require("http-status-codes");
const fabric_1 = require("../fabric");
const { OK, CREATED, BAD_REQUEST, NOT_FOUND, INTERNAL_SERVER_ERROR } = http_status_codes_1.StatusCodes;
exports.donationsRouter = express_1.default.Router();
/**
 * Get all donations
 */
exports.donationsRouter.get('/', async (req, res) => {
    console.log('Get all donations request received');
    try {
        const contract = req.app.locals.contract;
        const result = await (0, fabric_1.evaluateTransaction)(contract, 'GetAllDonations');
        const donations = JSON.parse(Buffer.from(result).toString());
        return res.status(OK).json(donations);
    }
    catch (error) {
        console.error('Error getting all donations:', error);
        return res.status(INTERNAL_SERVER_ERROR).json({
            status: 'Internal Server Error',
            message: error?.message || 'Unknown error',
            timestamp: new Date().toISOString()
        });
    }
});
/**
 * Create a new donation
 */
exports.donationsRouter.post('/', [
    (0, express_validator_1.body)('id').isString().notEmpty().withMessage('Donation ID is required'),
    (0, express_validator_1.body)('donorID').isString().notEmpty().withMessage('Donor ID is required'),
    (0, express_validator_1.body)('bloodType').isString().notEmpty().withMessage('Blood type is required'),
    (0, express_validator_1.body)('timestamp').isString().notEmpty().withMessage('Timestamp is required')
], async (req, res) => {
    console.log('Create donation request received:', req.body);
    // Validate request
    const errors = (0, express_validator_1.validationResult)(req);
    if (!errors.isEmpty()) {
        return res.status(BAD_REQUEST).json({
            status: 'Bad Request',
            errors: errors.array(),
            timestamp: new Date().toISOString()
        });
    }
    try {
        const contract = req.app.locals.contract;
        const { id, donorID, bloodType, timestamp } = req.body;
        // Check if donation already exists
        try {
            const existsResult = await (0, fabric_1.evaluateTransaction)(contract, 'DonationExists', id);
            const exists = Buffer.from(existsResult).toString() === 'true';
            if (exists) {
                return res.status(BAD_REQUEST).json({
                    status: 'Bad Request',
                    message: `Donation with ID ${id} already exists`,
                    timestamp: new Date().toISOString()
                });
            }
        }
        catch (checkError) {
            console.error('Error checking if donation exists:', checkError);
            // Continue if error occurs during existence check
        }
        // Create the donation
        await (0, fabric_1.submitTransaction)(contract, 'CreateDonation', id, donorID, bloodType, timestamp);
        return res.status(CREATED).json({
            status: 'Created',
            message: 'Donation created successfully',
            id,
            timestamp: new Date().toISOString()
        });
    }
    catch (error) {
        console.error('Error creating donation:', error);
        return res.status(INTERNAL_SERVER_ERROR).json({
            status: 'Internal Server Error',
            message: error?.message || 'Unknown error',
            timestamp: new Date().toISOString()
        });
    }
});
/**
 * Get a specific donation by ID
 */
exports.donationsRouter.get('/:id', [
    (0, express_validator_1.param)('id').isString().notEmpty().withMessage('Donation ID is required')
], async (req, res) => {
    console.log(`Get donation request received for ID: ${req.params.id}`);
    const errors = (0, express_validator_1.validationResult)(req);
    if (!errors.isEmpty()) {
        return res.status(BAD_REQUEST).json({
            status: 'Bad Request',
            errors: errors.array(),
            timestamp: new Date().toISOString()
        });
    }
    try {
        const contract = req.app.locals.contract;
        const id = req.params.id;
        try {
            const result = await (0, fabric_1.evaluateTransaction)(contract, 'ReadDonation', id);
            const donation = JSON.parse(Buffer.from(result).toString());
            return res.status(OK).json(donation);
        }
        catch (readError) {
            // Check if donation not found
            if (readError?.message && readError.message.includes('does not exist')) {
                return res.status(NOT_FOUND).json({
                    status: 'Not Found',
                    message: `Donation with ID ${id} not found`,
                    timestamp: new Date().toISOString()
                });
            }
            throw readError;
        }
    }
    catch (error) {
        console.error(`Error getting donation with ID ${req.params.id}:`, error);
        return res.status(INTERNAL_SERVER_ERROR).json({
            status: 'Internal Server Error',
            message: error?.message || 'Unknown error',
            timestamp: new Date().toISOString()
        });
    }
});
/**
 * Update donation status
 */
exports.donationsRouter.put('/:id/status', [
    (0, express_validator_1.param)('id').isString().notEmpty().withMessage('Donation ID is required'),
    (0, express_validator_1.body)('status').isString().notEmpty().withMessage('Status is required')
], async (req, res) => {
    console.log(`Update donation status request received for ID: ${req.params.id}`);
    const errors = (0, express_validator_1.validationResult)(req);
    if (!errors.isEmpty()) {
        return res.status(BAD_REQUEST).json({
            status: 'Bad Request',
            errors: errors.array(),
            timestamp: new Date().toISOString()
        });
    }
    try {
        const contract = req.app.locals.contract;
        const id = req.params.id;
        const { status } = req.body;
        // Check if donation exists first
        try {
            const existsResult = await (0, fabric_1.evaluateTransaction)(contract, 'DonationExists', id);
            const exists = Buffer.from(existsResult).toString() === 'true';
            if (!exists) {
                return res.status(NOT_FOUND).json({
                    status: 'Not Found',
                    message: `Donation with ID ${id} not found`,
                    timestamp: new Date().toISOString()
                });
            }
        }
        catch (checkError) {
            console.error('Error checking if donation exists:', checkError);
            // Continue if error occurs during existence check
        }
        // Update donation status
        await (0, fabric_1.submitTransaction)(contract, 'UpdateDonationStatus', id, status);
        return res.status(OK).json({
            status: 'OK',
            message: `Donation ${id} status updated to ${status}`,
            timestamp: new Date().toISOString()
        });
    }
    catch (error) {
        console.error(`Error updating donation status for ID ${req.params.id}:`, error);
        return res.status(INTERNAL_SERVER_ERROR).json({
            status: 'Internal Server Error',
            message: error?.message || 'Unknown error',
            timestamp: new Date().toISOString()
        });
    }
});
/**
 * Delete a donation
 */
exports.donationsRouter.delete('/:id', [
    (0, express_validator_1.param)('id').isString().notEmpty().withMessage('Donation ID is required')
], async (req, res) => {
    console.log(`Delete donation request received for ID: ${req.params.id}`);
    const errors = (0, express_validator_1.validationResult)(req);
    if (!errors.isEmpty()) {
        return res.status(BAD_REQUEST).json({
            status: 'Bad Request',
            errors: errors.array(),
            timestamp: new Date().toISOString()
        });
    }
    try {
        const contract = req.app.locals.contract;
        const id = req.params.id;
        // Check if donation exists first
        try {
            const existsResult = await (0, fabric_1.evaluateTransaction)(contract, 'DonationExists', id);
            const exists = Buffer.from(existsResult).toString() === 'true';
            if (!exists) {
                return res.status(NOT_FOUND).json({
                    status: 'Not Found',
                    message: `Donation with ID ${id} not found`,
                    timestamp: new Date().toISOString()
                });
            }
        }
        catch (checkError) {
            console.error('Error checking if donation exists:', checkError);
            // Continue if error occurs during existence check
        }
        // Delete the donation
        await (0, fabric_1.submitTransaction)(contract, 'DeleteDonation', id);
        return res.status(OK).json({
            status: 'OK',
            message: `Donation ${id} deleted successfully`,
            timestamp: new Date().toISOString()
        });
    }
    catch (error) {
        console.error(`Error deleting donation with ID ${req.params.id}:`, error);
        return res.status(INTERNAL_SERVER_ERROR).json({
            status: 'Internal Server Error',
            message: error?.message || 'Unknown error',
            timestamp: new Date().toISOString()
        });
    }
});
/**
 * Check if a donation exists
 */
exports.donationsRouter.get('/:id/exists', [
    (0, express_validator_1.param)('id').isString().notEmpty().withMessage('Donation ID is required')
], async (req, res) => {
    console.log(`Check donation exists request received for ID: ${req.params.id}`);
    const errors = (0, express_validator_1.validationResult)(req);
    if (!errors.isEmpty()) {
        return res.status(BAD_REQUEST).json({
            status: 'Bad Request',
            errors: errors.array(),
            timestamp: new Date().toISOString()
        });
    }
    try {
        const contract = req.app.locals.contract;
        const id = req.params.id;
        const existsResult = await (0, fabric_1.evaluateTransaction)(contract, 'DonationExists', id);
        const exists = Buffer.from(existsResult).toString() === 'true';
        return res.status(OK).json({
            status: 'OK',
            exists,
            id,
            timestamp: new Date().toISOString()
        });
    }
    catch (error) {
        console.error(`Error checking if donation exists with ID ${req.params.id}:`, error);
        return res.status(INTERNAL_SERVER_ERROR).json({
            status: 'Internal Server Error',
            message: error?.message || 'Unknown error',
            timestamp: new Date().toISOString()
        });
    }
});
//# sourceMappingURL=data:application/json;base64,